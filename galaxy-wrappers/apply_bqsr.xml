<tool id="gatk4_ApplyBQSR" name="GATK4 ApplyBQSR" version="1.0.0">
    <description>- Apply base quality score recalibration</description>
    <requirements>
      <requirement type="package" version="4.2.6.1">gatk4</requirement>
    </requirements>
    <macros>
      <import>macros.xml</import>
    </macros>
    <command detect_errors="exit_code"><![CDATA[
    ln -s '$FASTA' fasta.fa &&
    ln -s '$BAM' bamfile.bam &&
    ln -s '$OUTPUT' output.bam &&

    samtools faidx fasta.fa --output fasta.fa.fai &&
    gatk CreateSequenceDictionary -R fasta.fa -O fasta.dict &&

    gatk BuildBamIndex -I bamfile.bam &&

    gatk ApplyBQSR -I bamfile.bam -R fasta.fa --bqsr-recal-file '$RECAL_TABLE' -O output.bam 

    #if '$gatk_param_type_selector' == "advanced"
        ##Input Validation
        --read-validation-stringency '$read_validation_stringency'
        #if not $disable_sequence_dictionary_validation
            --disable-sequence-dictionary-validation
        #end if
        #if $lenient
            --lenient
        #end if

        ##Read Filters
        #if not $disable_tool_default_read_filters
            --disable-tool-default-read-filters
        #end if
        $read_filter
        $disable_read_filter
    
        ##Genomic Intervals
        #if $exclude_intervals_string
            --exclude-intervals '$exclude_intervals_string'
        #end if
        #if str($exclude_intervals_file) != "None"
            --exclude-intervals '$exclude_intervals_file'
        #end if
        --interval-exclusion-padding '$interval_exclusion_padding'
        --interval-set-rule '$interval_set_rule'

        ##Performance
        #if $use_jdk_deflater
            --use-jdk-deflater
        #end if
        #if $use_jdk_inflater
            --use-jdk-inflater
        #end if

        ##Macro Files
        #if str($gatk_config_file)
            --gatk-config-file '$gatk_config_file'
        #end if
        #if str($arguments_file)
            --arguments-file '$arguments_file'
        #end if
        #if str($sequence_dictionary)
            --sequence-dictionary '$sequence_dictionary'
        #end if
        #if str($read_index) != "None"
            --read-index '$read_index'
        #end if
    #end if

    #if '$tool_param_selector' == "advanced"
      ##Genomic Intervals
      #if $intervals
          --intervals '$intervals'
      #end if
      --interval-padding '$interval_padding'

      ##Penalties & Buffers
      --cloud-prefetch-buffer '$cloud_prefetch_buffer'
      #if $cloud_index_prefetch_buffer
        --cloud-index-prefetch-buffer '$cloud_index_prefetch_buffer'
      #end if

      ##Read Qualities
      #if $use_original_qualities
        --use-original-qualities
      #end if
      #if $static_quantized_quals
        --static-quantized-quals '$static_quantized_quals'
        --round-down-quantized '$round_down_quantized'
      #end if
      #if $quantize_quals
        --quantize-quals '$quantize_quals'
      #end if
      --preserve-qscores-less-than '$preserve_qscores_less_than'
      #if $global_qscore_prior
        --global-qscore-prior
      #end if

      ##Performance
      --gcs-max-retries '$gcs_max_retries'
      --disable-bam-index-caching '$disable_bam_index_caching'
    #end if
    ]]>
    </command>
    <inputs>
      <param name="BAM" type="data" format="bam,cram,sam" label="Input file" />
      <param name="FASTA" type="data" format="fasta" label="Reference file"/>
      <param name="FASTA_SELECT" type="select" label="Select reference genome" help="If your genome of interest is not listed, contact the Galaxy team" optional="True" >
            <option> from_data_table="fasta_indexes" </option>
      </param>
      <param name="RECAL_TABLE" type="data" format="tabular" label="Covariates table" help="Recalibration file generated by BaseRecalibrator on the input BAM or CRAM file." />

      <expand macro="gatk_param_type_conditional" />

      <conditional name ="tool_params">
        <param name="tool_param_selector" type="select" label="Basic or Advanced Tool options">
          <option value="basic" selected="True">Basic</option>
          <option value="advanced">Advanced</option>
        </param>
        <when value = "basic">
          <!--Do nothing-->
        </when>
        <when value="advanced">
          <section name="Genomic Intervals">
            <param type="text" argument="--intervals" label="Include genomic intervals" optional="True" help="samtools-style genomic intervals to be included (e.g. chr24 or chr24:100-200)" />
            <param type="integer" argument="--interval-padding" label="Amount of padding for each interval (bp)" value="0" help="For example, '-L 1:100' with a padding value of 20 would turn into '-L 1:80-120'."/>
            <param type="select" argument="--interval-merging-rule" label="Rule for merging abutting intervals">
                <option value="ALL" selected="True">ALL</option>
                <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
            </param>
          </section>
          <section name="Penalties &amp; Buffers">
            <param type="integer" argument="--cloud-prefetch-buffer" label="Size of the cloud-only prefetch buffer (in MB)" value="40" help="0 to disable." />
            <param type="integer" argument="--cloud-index-prefetch-buffer" label="Size of the cloud-only prefetch buffer (in MB)" optional="True" help="Defaults to cloudPrefetchBuffer" />
          </section>
          <section name="Read Qualities">
                <param type="boolean" argument="--use-original-qualities" label="Use original base qualities (no BQSR/recalibration)" checked="False" help="Use the original base qualities (that were in the data before BQSR/recalibration) which are stored in the OQ tag, if present, rather than post-recalibration quality scores." />
                <param type="boolean" argument="--emit-original-quals" label="Emit original quality scores" checked="False" help="Output original qualities under 'OQ' tag" />
                <param type="text" argument="--static-quantized-quals" label="Sort quality scores to a given number of static scores" optional="True" help="List the scores, separated by spaces.  Cannot be used as the same time as --quantize-quals" />
                <param type="boolean" argument="--round-down-quantized" label="Round qualities down to the nearest quantized qualities" checked="False" help="Only works with --static-quantized-quals option" />
                <param type="integer" argument="--quantize-quals" label="Quantize quality scores a given number of levels" optional="True" help="Cannot be used with --static-quantized-quals or --round-down-quantized" />
                <param type="integer" argument="--preserve-qscores-less-than" label="Don't recalibrate bases with quality scores less than" value="6" help="Values less than 6 can lead to problems downstream" />
                <param type="float" argument="--global-qscore-prior" label="Global Qscore Bayesian prior to use for BQSR" optional="True" help="This will be used as a flat prior for all mismatching quality scores instead of the reported quality score." />
          </section>
          <section name="Performance">
            <param type="integer" argument="--gcs-max-retries" value="20" label="Number of times to attempt to re-initiate connection to GCS bucket channel" />
            <param type="boolean" argument="--disable-bam-index-caching" label="Cache bam indexes (reduces memory requirements)" checked="True" />
          </section>
        </when>
      </conditional>
      
      <!-- 
      Omitted:
      -add-output-sam-program-record,
      -add-output-vcf-command-line,
      -create-output-bam-index, 
      -create-output-bam-md5, 
      -preserve-qscores-less-than,
      -create-output-variant-index, 
      -create-output-variant-md5 
      -QUIET
      -seconds-between-progress-updates
      -TMP_DIR
      options ommited -->
    </inputs>
    <outputs>
        <data name="OUTPUT" type="data" format="bam" label="Recalibrated BAM file"/>
    </outputs>
    <tests>
      <!--To be created -->
    </tests>
    <help>
      **What it does**

      Apply base quality score recalibration
      This tool performs the second pass in a two-stage process called Base Quality Score Recalibration (BQSR). Specifically, it recalibrates the base qualities of the input reads based on the recalibration table produced by the BaseRecalibrator tool, and outputs a recalibrated BAM or CRAM file.

      https://gatk.broadinstitute.org/hc/en-us/articles/360037055712-ApplyBQSR

    </help>

</tool>