<tool id="gatk4_GenotypeGVCFs" name="GATK4 GenotypeGVCFs" version="1.0.0">
    <description>- Perform joint genotyping on one or more samples pre-called with HaplotypeCaller</description>
    <macros>
      <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code">
        <![CDATA[
        ##Fix to run on arm macbook
        export JAVA_HOME=/Users/benjaminbeer/Downloads/jdk-17.0.10.jdk/Contents/Home/bin &&
        export PATH=/Users/benjaminbeer/Downloads/jdk-17.0.10.jdk/Contents/Home/bin:\$PATH &&

        echo "$FASTA" &&
        #if $reference_conditional.reference_selector == "File"
            ln -s "$FASTA" fasta.fa &&
        #else 
            #set $fasta_file = $fasta_source.fasta_id.fields.path
            ln -s "$fasta_file" fasta.fa &&
        #end if
        samtools faidx fasta.fa --output fasta.fa.fai &&
        gatk CreateSequenceDictionary -R fasta.fa -O fasta.dict &&

        #if $variant_conditional.variant_selector == "File"
            ln -s "$variant_list" variants.vcf &&
            bgzip -c variants.vcf > variants.vcf.gz &&
            tabix -p vcf variants.vcf.gz && 
            gatk GenotypeGVCFs --reference fasta.fa --variant variants.vcf.gz
        #else
            ##Somewhat sketchy way to decompress database, since we don't know the name of the database once it's decompressed
            #import subprocess
            #set $archive = str($variant_database)
            #set $process = subprocess.run(["unzip", "-o", $archive, "-d", $__new_file_path__], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=False)
            #set $process_output = $process.stdout
            #set $database_start = $process_output.find("inflating:") + 11
            #set $database_end = $process_output.find("/callset.json")
            #set $database = $process_output[$database_start:$database_end]
            cp -r $database database &&

            gatk GenotypeGVCFs -R "fasta.fa" --variant gendb://database
        #end if
        -O "$OUTPUT"

        #if str($gatk_params.gatk_params_selector) == "advanced"
            ##Input Validation
            --read-validation-stringency "$read_validation_stringency"
            --disable-sequence-dictionary-validation "$disable_sequence_dictionary_validation"
            --lenient "$lenient"

            ##Genomic Intervals
            #for $i, $interval in enumerate($exclude_intervals_repeat):
                --exclude-intervals "${interval.XL}"
            #end for
            #if str($exclude_intervals_file) != "None"
                --exclude-intervals "$exclude_intervals_file"
            #end if
            --interval-exclusion-padding "$interval_exclusion_padding"
            --interval-set-rule "$interval_set_rule"

            ##Performance
            --use-jdk-deflater "$use_jdk_deflater"
            --use-jdk-inflater "$use_jdk_inflater"

            ##Macro Files
            #if str($gatk_config_file) != "None":
                --gatk-config-file "$gatk_config_file"
            #end if
            #if str($arguments_file) != "None":
                --arguments_file "$arguments_file"
            #end if
            #if str($sequence_dictionary) != "None":
                --sequence-dictionary "$sequence_dictionary"
            #end if
            #if str($read_index) != "None":
                --read-index "$read_index"
            #end if
        #end if

        #if str($tool_params.tool_param_selector) == "advanced"
            --sample-ploidy "$sample_ploidy"
            --heterozygosity "$heterozygosity"
            --heterozygosity-stdev "$heterozygosity_stdev"
            --indel-heterozygosity "$indel_heterozygosity"

            ## Variant Calling
            #if str($dbsnp) != "None":
                --dbsnp "$dbsnp"
            #end if
            ##gatk does not recognize --input-prior so commented out
            #*
            #set $prior_list = $input_prior.replace("[", "").replace("]", "").replace(" ", "").split(",")
            #for $prior in $prior_list:
                --input-prior "$prior"
            #end for
            *#
            --standard-min-confidence-threshold-for-calling "$standard_min_confidence_threshold_for_calling"

            ## Read Filters
            #for $filter in $tool_filters:
                --read-filter "$filter"
            #end for
            #if $AmbiguousBaseReadFilter:
                --read-filter "AmbiguousBaseReadFilter"
                #if $ambig_filter_frac
                    --ambig-filter-frac "$ambig_filter_frac"
                #else
                    --ambig-filter-bases "$ambig_filter_bases"
                #end if
            #end if
            #if $ExcessiveEndClippedReadFilter
                --read-filter "ExcessiveEndClippedReadFilter" 
                --max-clipped-bases "$max_clipped_bases"
            #end if
            #if $FlowBasedTPAttributeValidReadFilter
                --read-filter "FlowBasedTPAttributeValidReadFilter" 
                --read-filter-max-hmer "$read_filter_max_hmer"
            #end if
            #if $FragmentLengthReadFilter
                --read-filter "FragmentLengthReadFilter" 
                #if $max_fragment_length
                    --max-fragment-length "$max_fragment_length"
                #end if
                #if $min_fragment_length
                    --min-fragment-length "$min_fragment_length"
                #end if
            #end if
            #if $IntervalOverlapReadFilter
                --read-filter "IntervalOverlapReadFilter" 
                --keep-intervals "$keep_intervals"
            #end if
            #if $JexlExpressionReadTagValueFilter
                --read-filter "JexlExpressionReadTagValueFilter" 
                --read-filter-expression "$read_filter_expression"
            #end if
            #if $LibraryReadFilter
                --read-filter "LibraryReadFilter" 
                --library "$library"
            #end if
            #if $MappingQualityReadFilter
                --read-filter "MappingQualityReadFilter" 
                #if $minimum_mapping_quality
                    --minimum-mapping-quality "$minimum_mapping_quality"
                #end if
                #if $maximum_mapping_quality
                    --maximum-mapping-quality "$maximum_mapping_quality"
                #end if
            #end if
            #if $MateDistantReadFilter
                --read-filter "MateDistantReadFilter" 
                --mate-too-distant-length "$mate_too_distant_length"
            #end if
            #if $OverclippedReadFilter
                --read-filter "OverclippedReadFilter" 
                --filter-too-short "$filter_too_short"
                --dont-require-soft-clips-both-ends "$dont_require_soft_clips_both_ends"
            #end if
            #if $PlatformReadFilter
                --read-filter "PlatformReadFilter" 
                --platform-filter-name "$platform_filter_name"
            #end if
            #if $PlatformUnitReadFilter
                --read-filter "PlatformUnitReadFilter" 
                --black-listed-lanes "$black_listed_lanes"
            #end if
            #if $ReadGroupBlackListReadFilter
                --read-filter "ReadGroupBlackListReadFilter" 
                --read-group-black-list "$read_group_black_list"
            #end if
            #if $ReadGroupReadFilter
                --read-filter "ReadGroupReadFilter" 
                --keep-read-group "$keep_read_group"
            #end if
            #if $ReadLengthReadFilter
                --read-filter "ReadLengthReadFilter" 
                --max-read-length "$max_read_length"
                #if $min_read_length
                    --min-read-length "$min_read_length"
                #end if
            #end if
            #if $ReadNameReadFilter
                --read-filter "ReadNameReadFilter" 
                --read-name "$read_name"
            #end if
            #if $ReadStrandFilter
                --read-filter "ReadStrandFilter" 
                --keep-reverse-strand-only "$keep_reverse_strand_only"
            #end if
            #if $ReadTagValueFilter
                --read-filter "ReadTagValueFilter" 
                --read-filter-tag "$read_filter_tag"
                --read-filter-tag-comp "$read_filter_tag_comp"
            #end if
            #if $SampleReadFilter
                --read-filter "SampleReadFilter" 
                --sample "$sample"
            #end if
            #if $SoftClippedReadFilter:
                --read-filter "SoftClippedReadFilter"
                --invert-soft-clip-ratio-filter "$invert_soft_clip_ratio_filter"
                #if $soft_clipped_ratio_threshold
                    --soft-clipped-ratio-threshold "$soft_clipped_ratio_threshold"
                #else
                    --soft-clipped-leading-trailing-ratio "$soft_clipped_leading_trailing_ratio"
                #end if
            #end if
            --disable-tool-default-read-filters "$disable_tool_default_read_filters"

            ##Genomic Intervals
            #for $interval in $intervals_repeat:
                --intervals ${interval.L}
            #end for
            --interval-padding "$interval_padding"
            --interval-merging-rule "$interval_merging_rule"
            --only-output-calls-starting-in-intervals "$only_output_calls_starting_in_intervals"
            
            ##Penalties & Buffers
            --cloud-prefetch-buffer "$cloud_prefetch_buffer"
            #if $cloud_index_prefetch_buffer
                --cloud-index-prefetch-buffer "$cloud_index_prefetch_buffer"
            #end if

            ##Alleles
            #if str($alleles) != "None":
                --alleles "$alleles"
            #end if
            #for $annotation in $annotations_repeat:
                --annotations ${annotation.A}
            #end for
            #for $group in $group_repeat:
                --annotation-group ${group.G}
            #end for
            #for $annotation in $exclude_annotations_repeat:
                --annotations-to-exclude ${annotation.AX}
            #end for
            --max-alternate-alleles "$max_alternate_alleles"
            --max-genotype-count "$max_genotype_count"
            --annotate-with-num-discovered-alleles "$annotate_with_num_discovered_alleles"
            --disable-tool-default-annotations "$disable_tool_default_annotations"
            --use-new-qual-calculator "$use_new_qual_calculator"

            ##Performance
            --gcs-max-retries "$gcs_max_retries"
            --disable-bam-index-caching "$disable_bam_index_caching"
        #end if

        ]]>
    </command>
    <inputs>
      <conditional name="reference_conditional">
        <param name="reference_selector" type="select" label="Reference Genome" >
            <option value="File" selected="True">File</option>
            <option value="From Galaxy">From Galaxy</option>
        </param>
        <when value="File">
            <param type="data" name="FASTA" argument="--reference" format="fasta" label="Reference file"/>
        </when>
        <when value="From Galaxy">
          <param argument="--reference" type="select" label="Select reference genome" help="If your genome of interest is not listed, contact the Galaxy team" optional="True">
              <options from_data_table="fasta_indexes" />
          </param>
        </when>
      </conditional>
      <conditional name="variant_conditional">
        <param name="variant_selector" type="select" label="Variant file or database" >
            <option value="File" selected="True">File</option>
            <option value="Database">Database</option>
        </param>
        <when value="File">
          <param type="data" format="vcf" name="variant_list" label="Variant List"/>
        </when>
        <when value="Database">
          <param type="data" name="variant_database" label="Genomics Database" help="GenomicDB generated with GenomicsDBImport. Should be a compressed directory with .zip extension" />
        </when>
      </conditional>

      <expand macro="gatk_param_type_conditional" />

      <conditional name ="tool_params">
        <param name="tool_param_selector" type="select" label="Basic or Advanced Tool options">
          <option value="basic" selected="True">Basic</option>
          <option value="advanced">Advanced</option>
        </param>
        <when value = "basic">
          <!--Do nothing-->
        </when>
        <when value="advanced">
          <section name="Population Options" help="See the GATKDocs for full details on the meaning of heterozygosity">
              <param type="integer" argument="--sample-ploidy" label="Ploidy (number of chromosomes) per sample" value="2" help="For pooled data, set to (Number of samples in each pool * Sample Ploidy)."/>
              <param type="float" argument="--heterozygosity" label="Heterozygosity" value="0.001" help="The expected heterozygosity value used to compute prior probability that a locus is non-reference." />
              <param type="float" argument="--heterozygosity-stdev" label="Heterozygosity Standard Deviation" value="0.01" help="Standard deviation of heterozygosity for SNP and indel calling." />
              <param type="float" argument="--indel-heterozygosity" label="Indel Heterozygosity" value="0.000125" help="Informs the prior probability of having an indel at a site." />
          </section>
          <section name="Variant Calling">
            <param type="data" format="vcf" argument="--dbsnp" label="dbSNP" help="A dbSNP VCF file" optional="True" />
            <!-- <param type="text" argument="-input-prior" label="Input prior for calls" value="[]" help="By default, the prior specified with the argument -heterozygosity/-hets is used for variant discovery at a particular locus, using an infinite sites model" /> -->
            <param type="float" argument="--standard-min-confidence-threshold-for-calling" value="10.0" label="Minimum phred-scaled confidence threshold for calling variants" />
          </section>
          <section name="Read Filters" help="Filters to apply in addition to tool-defaults">
            <param name="tool_filters" type="select" multiple="True" display="checkboxes" label="Default read filters"  >
              <option value="AlignmentAgreesWithHeaderReadFilter" selected="False" />
              <option value="AllowAllReadsReadFilter" selected="False" />
              <option value="CigarContainsNoNOperator" selected="False" />
              <option value="FirstOfPairReadFilter" selected="False" />
              <option value="FlowBasedTPAttributeSymetricReadFilter" selected="False" />
              <option value="GoodCigarReadFilter" selected="False" />
              <option value="HasReadGroupReadFilter" selected="False" />
              <option value="HmerQualitySymetricReadFilter" selected="False" />
              <option value="MappedReadFilter" selected="False" />
              <option value="MappingQualityAvailableReadFilter" selected="False" />
              <option value="MappingQualityNotZeroReadFilter" selected="False" />
              <option value="MatchingBasesAndQualsReadFilter" selected="False" />
              <option value="MateDifferentStrandReadFilter" selected="False" />
              <option value="MateOnSameContigOrNoMappedMateReadFilter" selected="False" />   
              <option value="MateUnmappedAndUnmappedReadFilter" selected="False" />
              <option value="MetricsReadFilter" selected="False" />
              <option value="NonChimericOriginalAlignmentReadFilter" selected="False" />
              <option value="NonZeroFragmentLengthReadFilter" selected="False" />
              <option value="NonZeroReferenceLengthAlignmentReadFilter" selected="False" />
              <option value="NotDuplicateReadFilter" selected="False" />
              <option value="NotProperlyPairedReadFilter" selected="False" />
              <option value="NotSecondaryAlignmentReadFilter" selected="False" />   
              <option value="NotSupplementaryAlignmentReadFilter" selected="False" />
              <option value="PairedReadFilter" selected="False" />
              <option value="PassesVendorQualityCheckReadFilter" selected="False" />
              <option value="PrimaryLineReadFilter" selected="False" />
              <option value="ProperlyPairedReadFilter" selected="False" />   
              <option value="ReadGroupHasFlowOrderReadFilter" selected="False" />
              <option value="ReadLengthEqualsCigarLengthReadFilter" selected="False" />
              <option value="SecondOfPairReadFilter" selected="False" />
              <option value="SeqIsStoredReadFilter" selected="False" />
              <option value="ValidAlignmentEndReadFilter" selected="False" />
              <option value="ValidAlignmentStartReadFilter" selected="False" />
              <option value="WellformedFlowBasedReadFilter" selected="False" />
              <option value="WellformedReadFilter" selected="False" />   
            </param>
            <conditional name="AmbiguousBaseReadFilter">
                <param type="boolean" name="AmbiguousBaseReadFilter" truevalue="Yes" falsevalue="No" label="Ambiguous Base Read Filter" />
                <when value="Yes">
                    <param type="float" argument="--ambig-filter-frac" value="0.5" optional="True"/>
                    <param type="integer" argument="--ambig-filter-bases" optional="True"/>
                </when>
                <when value="No" />
            </conditional>
            <conditional name="ExcessiveEndClippedReadFilter">
                <param type="boolean" name="ExcessiveEndClippedReadFilter" truevalue="Yes" falsevalue="No" label="Excessive End Clipped Read Filter" />
                <when value="Yes">
                    <param type="integer" argument="--max-clipped-bases" value="1000" />
                </when>
                <when value="No" />
            </conditional>
            <conditional name="FlowBasedTPAttributeValidReadFilter">
                <param type="boolean" name="FlowBasedTPAttributeValidReadFilter" truevalue="Yes" falsevalue="No" label="Flow Based TP Attribute Valid Read Filter" />
                <when value="Yes">
                    <param type="integer" argument="--read-filter-max-hmer" value="12" />
                </when>
                <when value="No" />
            </conditional>
            <conditional name="FragmentLengthReadFilter">
                <param type="boolean" name="FragmentLengthReadFilter" truevalue="Yes" falsevalue="No" label="Fragment Length Read Filter" />
                <when value="Yes">
                    <param type="integer" argument="--max-fragment-length" value="1000000" />
                    <param type="integer" argument="--min-fragment-length" value="0" />
                </when>
                <when value="No" />
            </conditional>
            <conditional name="IntervalOverlapReadFilter">
                <param type="boolean" name="IntervalOverlapReadFilter" truevalue="Yes" falsevalue="No" label="Interval Overlap Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--keep-intervals" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="JexlExpressionReadTagValueFilter">
                <param type="boolean" name="JexlExpressionReadTagValueFilter" truevalue="Yes" falsevalue="No" label="Jexl Expression Read Tag Value Filter" />
                    <when value="Yes">
                        <param type="text" argument="--read-filter-expression" help="One or more JEXL expressions used to filter"/>
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="LibraryReadFilter">
                <param type="boolean" name="LibraryReadFilter" truevalue="Yes" falsevalue="No" label="Library Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--library" help="Name of the library to keep"/>
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="MappingQualityReadFilter">
                <param type="boolean" name="MappingQualityReadFilter" truevalue="Yes" falsevalue="No" label="Mapping Quality Read Filter" />
                    <when value="Yes">
                        <param type="integer" argument="--minimum-mapping-quality" value="10" optional="True" />
                        <param type="integer" argument="--maximum-mapping-quality" optional="True" />                            
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="MateDistantReadFilter">
                <param type="boolean" name="MateDistantReadFilter" truevalue="Yes" falsevalue="No" label="Mate Distant Read Filter" />
                    <when value="Yes">
                        <param type="integer" argument="--mate-too-distant-length" value="1000" />                    
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="OverclippedReadFilter">
                <param type="boolean" name="OverclippedReadFilter" truevalue="Yes" falsevalue="No" label="Overclipped Read Filter" />
                    <when value="Yes">
                        <param type="integer" argument="--filter-too-short" value="30" />   
                        <param type="boolean" argument="--dont-require-soft-clips-both-ends" checked="False" />                 
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="PlatformReadFilter">
                <param type="boolean" name="PlatformReadFilter" truevalue="Yes" falsevalue="No" label="Platform Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--platform-filter-name" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="PlatformUnitReadFilter">
                <param type="boolean" name="PlatformUnitReadFilter" truevalue="Yes" falsevalue="No" label="Platform Unit Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--black-listed-lanes" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadGroupBlackListReadFilter">
                <param type="boolean" name="ReadGroupBlackListReadFilter" truevalue="Yes" falsevalue="No" label="Read Group BlackList Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--read-group-black-list" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadGroupReadFilter">
                <param type="boolean" name="ReadGroupReadFilter" truevalue="Yes" falsevalue="No" label="Read Group Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--keep-read-group" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadLengthReadFilter">
                <param type="boolean" name="ReadLengthReadFilter" truevalue="Yes" falsevalue="No" label="Read Length Read Filter" />
                    <when value="Yes">
                        <param type="integer" argument="--max-read-length" />  
                        <param type="integer" argument="--min-read-length" value="1" optional="True" />                          
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadNameReadFilter">
                <param type="boolean" name="ReadNameReadFilter" truevalue="Yes" falsevalue="No" label="Read Name Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--read-name" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadStrandFilter">
                <param type="boolean" name="ReadStrandFilter" truevalue="Yes" falsevalue="No" label="Read Strand Filter" />
                    <when value="Yes">
                        <param type="boolean" argument="--keep-reverse-strand-only" checked="False" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="ReadTagValueFilter">
                <param type="boolean" name="ReadTagValueFilter" truevalue="Yes" falsevalue="No" label="Read Tag Value Filter" />
                    <when value="Yes">
                        <param type="text" argument="--read-filter-tag" />
                        <param type="float" argument="--read-filter-tag-comp" value="0.0" />
                        <param type="select" argument="--read-filter-tag-op" label="Read Filter Tag Operator">
                            <option value="EQUAL" selected="True">EQUAL</option>
                            <option value="NOT_EQUAL">NOT_EQUAL</option>
                            <option value="LESS">LESS</option>
                            <option value="LESS_OR_EQUAL">LESS_OR_EQUAL</option>
                            <option value="GREATER">GREATER</option>
                            <option value="GREATER_OR_EQUAL">GREATER_OR_EQUAL</option>
                        </param>
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="SampleReadFilter">
                <param type="boolean" name="SampleReadFilter" truevalue="Yes" falsevalue="No" label="Sample Read Filter" />
                    <when value="Yes">
                        <param type="text" argument="--sample" />
                    </when>
                    <when value="No" />
            </conditional>
            <conditional name="SoftClippedReadFilter">
                <param type="boolean" name="SoftClippedReadFilter" truevalue="Yes" falsevalue="No" label="Soft ClippedRead Filter" />
                    <when value="Yes">
                        <param type="boolean" argument="--invert-soft-clip-ratio-filter" checked="False" />
                        <param type="float" argument="--soft-clipped-ratio-threshold" optional="True" />
                        <param type="float" argument="--soft-clipped-leading-trailing-ratio" optional="True" />                            
                    </when>
                    <when value="No" />
            </conditional>
            <param type="boolean" argument="--disable-tool-default-read-filters" checked="False" />
          </section>
          <section name="Genomic Intervals">
            <repeat argument="--intervals" name="intervals_repeat" label="Genomic interval over which to operate" help="-L">
                <param name="L" type="text" value=""/>
            </repeat>            
            <param type="integer" argument="--interval-padding" label="Amount of padding for each interval (bp)" value="0" help="For example, '-L 1:100' with a padding value of 20 would turn into '-L 1:80-120'."/>
            <param type="select" argument="--interval-merging-rule" label="Rule for merging abutting intervals">
                <option value="ALL" selected="True">ALL</option>
                <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
            </param>
            <param type="boolean" argument="--only-output-calls-starting-in-intervals" label="Restrict variant output to sites that start within provided intervals" checked="False" />
          </section>
          <section name="Penalties &amp; Buffers">
            <param type="integer" argument="--cloud-prefetch-buffer" label="Size of the cloud-only prefetch buffer (in MB)" value="40" help="0 to disable." />
            <param type="integer" argument="--cloud-index-prefetch-buffer" label="Size of the cloud-only prefetch buffer (in MB)" optional="True" help="Defaults to cloudPrefetchBuffer" />
          </section>
          <section name="Alleles">
            <param type="data" format="vcf" argument="--alleles" label="Set of alleles to force-call called regardless of evidence" optional="True" />
            <repeat argument="--annotations" name="annotations_repeat" title="Annotations to add to variant calls" help="These supplement annotations provided by annotation groups. -A" optional="True">
                <param name="A" type="text" value=""/>
            </repeat>  
            <repeat argument="--annotation-group" name="group_repeat" title="Annotation groups to add to variant calls" help="Any requirements not met may cause run to fail. -G" optional="True">
                <param name="G" type="text" value=""/>
            </repeat>  
            <repeat argument="--annotations-to-exclude" name="exclude_annotations_repeat" title="Annotations to exclude from variant calls" help="This  has higher priority than the -A or -G arguments. -AX" optional="True">
                <param name="AX" type="text" value=""/>
            </repeat>  
            <param type="integer" argument="--max-alternate-alleles" label="Maximum number of alternate alleles to genotype" value="6" />
            <param type="integer" argument="--max-genotype-count" label="Maximum number of genotypes to consider at any site" value="1024" />
            <param type="boolean" argument="--annotate-with-num-discovered-alleles" label="Annotate records with the number of alternate alleles that were discovered" checked="False" />
            <param type="boolean" argument="--disable-tool-default-annotations" label="Disable all tool default annotations" />
            <param type="boolean" argument="--use-new-qual-calculator" label="Use the AF model for allele frequency" />
          </section>
          <section name="Performance">
            <param type="integer" argument="--gcs-max-retries" value="20" label="Number of times to attempt to re-initiate connection to GCS bucket channel" />
            <param type="boolean" argument="--disable-bam-index-caching" label="Cache bam indexes (reduces memory requirements)" checked="True" />
          </section>
        </when>
      </conditional>

    </inputs>
    <outputs>
        <data name="OUTPUT" type="data" format="vcf" label="VCF file"/>
    </outputs>

    <tests>
    </tests>

    <help>
      **What it does**

      Perform joint genotyping on one or more samples pre-called with HaplotypeCaller
      This tool is designed to perform joint genotyping on a single input, which may contain one or many samples.
      In any case, the input samples must possess genotype likelihoods produced by HaplotypeCaller with `-ERC GVCF`
      or `-ERC BP_RESOLUTION`.

      https://gatk.broadinstitute.org/hc/en-us/articles/360036899732-GenotypeGVCFs

    </help>

</tool>